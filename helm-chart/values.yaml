# Default values for qa-dashboard Helm chart
# This is a YAML-formatted file.

# Application configuration
image:
  repository: qa-dashboard
  tag: "latest"
  pullPolicy: IfNotPresent

# Number of replicas
replicaCount: 2

# Service configuration
service:
  type: ClusterIP
  port: 5000
  targetPort: 5000
  annotations: {}

# Ingress configuration
ingress:
  enabled: true
  className: ""
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: qa-dashboard.yourcompany.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: qa-dashboard-tls
      hosts:
        - qa-dashboard.yourcompany.com

# Resource limits and requests
resources:
  limits:
    cpu: 500m
    memory: 1Gi
  requests:
    cpu: 100m
    memory: 256Mi

# Node selector, tolerations, and affinity
nodeSelector: {}
tolerations: []
affinity: {}

# Persistence configuration
persistence:
  enabled: true
  accessMode: ReadWriteOnce
  size: 10Gi
  storageClass: ""
  annotations: {}

# Horizontal Pod Autoscaler
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Application environment variables
env:
  # API Configuration
  API_BASE_URL: "http://api-service.namespace.svc.cluster.local"
  REFRESH_INTERVAL: "10"

  # Authentication
  REQUIRE_AUTH: "true"
  SECRET_KEY: "change-this-in-production"

  # Notification Channels (set via secrets)
  # SLACK_WEBHOOK_URL: ""
  # DISCORD_WEBHOOK_URL: ""
  # TEAMS_WEBHOOK_URL: ""

  # Email Configuration (set via secrets)
  # SMTP_SERVER: "smtp.gmail.com"
  # SMTP_PORT: "587"
  # EMAIL_FROM: "qa@yourcompany.com"
  # EMAIL_TO: "alerts@yourcompany.com"

# Secrets for sensitive data
secrets:
  # Authentication
  dashboardUsername: "admin"
  dashboardPassword: "change-this-password"

  # Notification webhooks
  slackWebhookUrl: ""
  discordWebhookUrl: ""
  teamsWebhookUrl: ""

  # Email credentials
  smtpUsername: ""
  smtpPassword: ""

# Network policies
networkPolicy:
  enabled: true
  allowedIngressPorts:
    - 5000

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Service account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000

securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  capabilities:
    drop:
      - ALL

# Health checks
healthCheck:
  enabled: true
  path: "/api/qa-data"
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

# Monitoring
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    namespace: monitoring
    interval: 30s
    scrapeTimeout: 10s

# Logging
logging:
  level: INFO
  format: json

# Test configuration (mounted as ConfigMap)
testConfig:
  enabled: true
  # This will mount kilo_qa_checklist.json as a ConfigMap

# Service Mesh Configuration (Istio)
istio:
  enabled: true
  virtualService:
    enabled: true
    hosts:
      - qa-dashboard.qa-monitoring.svc.cluster.local
    gateways: []
    http:
      - match:
          - uri:
              prefix: "/metrics"
        retries:
          attempts: 3
          perTryTimeout: 2s
  destinationRule:
    enabled: true
    trafficPolicy:
      tls:
        mode: ISTIO_MUTUAL
      loadBalancer:
        simple: ROUND_ROBIN
  peerAuthentication:
    enabled: true
    mtls:
      mode: STRICT

# Security Configuration
security:
  networkPolicy:
    enabled: true
    allowedIngressPorts:
      - 5000
  podSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    seccompProfile:
      type: RuntimeDefault
  securityContext:
    enabled: true
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    capabilities:
      drop:
        - ALL
  serviceAccount:
    create: true
    annotations: {}
    name: ""
    automountServiceAccountToken: false

# High Availability
highAvailability:
  podDisruptionBudget:
    enabled: true
    minAvailable: 1
  antiAffinity:
    enabled: true
    type: preferredDuringSchedulingIgnoredDuringExecution
    topologyKey: kubernetes.io/hostname